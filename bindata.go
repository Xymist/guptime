// Code generated by go-bindata.
// sources:
// home.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _homeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x4b\x6f\xdc\x36\x10\xbe\xeb\x57\x4c\x58\x14\x96\x61\x54\xb2\xd1\xc7\x61\x57\xd2\xa1\x6e\xd0\x14\x70\xd0\x02\x76\x51\x04\x69\x0e\x5c\x71\x56\x62\x43\x71\x04\x71\xb4\x6b\x37\xd8\xff\x5e\x50\x5a\x3d\xbc\x8f\xa4\xce\x65\xb5\x1c\x0e\xbf\xef\x9b\xe1\x90\xc3\xe4\xd5\x2f\xbf\xdf\x3e\xbc\xfb\xe3\x35\x94\x5c\x99\x2c\x48\xfc\x07\x8c\xb4\x45\x2a\xd0\x0a\x6f\x40\xa9\xb2\x20\x61\xcd\x06\xb3\x5f\xff\xac\x59\x57\x08\x77\x54\x24\x71\x6f\x0a\x12\x97\x37\xba\x66\xe0\xa7\x1a\x53\xc1\xf8\xc8\xf1\x3f\x72\x23\x7b\xab\xc8\x82\xad\xb6\x8a\xb6\x11\x59\x43\x52\x41\x0a\xeb\xd6\xe6\xac\xc9\x42\x78\x09\x9f\x02\x00\x80\x8d\x6c\x20\x27\x6b\x97\xe3\xa8\x72\x05\xa4\xa0\x28\x6f\x2b\xb4\x1c\x15\xc8\xaf\x0d\xfa\xbf\x3f\x3f\xfd\xa6\x42\x51\xb9\x42\x5c\x4e\xde\x86\x3e\xeb\x6d\x68\xf4\x1e\xb9\x65\x5d\xa3\x55\x77\x54\x84\x9a\xb1\x1a\x84\x0c\x80\x8a\xee\xf3\x86\x8c\x81\xd4\x63\x47\xae\x1b\x3c\x50\x0d\xd9\x6c\xfc\x06\x75\x51\x32\x7c\xd7\x99\x72\xa3\xd1\xf2\x68\xba\x59\x8e\x78\x7e\xb6\x67\xbb\x2d\xb5\x51\x3d\xdf\x34\xad\xd7\x10\x0e\x74\x73\x19\xc3\xd2\x89\x3b\xfd\x3f\xdc\x13\xf0\x2e\x98\x7e\xcf\xa6\x66\x4d\x4d\x25\x2e\x23\xb2\xae\x5d\x55\x9a\x4f\xee\xce\xa0\xf2\x95\xdf\xa2\x43\x89\x0d\x72\xdb\x58\x58\x4b\xe3\xf0\x90\x7b\x5c\x58\xb9\x22\xda\x48\xd3\xe2\x4b\x57\x7b\xc6\xc8\xa1\x55\xe1\x04\x31\xf9\x8d\x36\x48\x41\x88\xc9\x7e\x8c\xba\xeb\x3f\x5e\x4c\x5f\x8d\xef\xc5\x5f\xb8\xba\xa7\xfc\x23\xb2\xf8\x30\x57\xe5\x19\x21\x05\x8b\x5b\x18\x3d\x42\xb1\x75\x8b\x38\x16\x70\x35\x25\xd2\x50\x2e\x7d\x9a\xa2\x92\x1c\xc3\x15\x88\xd8\xb1\xe4\xd6\x89\x99\xbe\x4e\xfd\x89\xb2\xc7\x0d\x3f\x4f\x84\x2f\x39\x5f\x16\xf3\x22\xce\x1b\x94\x8c\xfb\xcd\x0a\x85\xd2\x9b\x39\x34\x74\xfe\x91\xb6\x16\x9b\x37\x0f\x6f\xef\x7c\x06\x92\x55\x76\x4b\xd6\x62\xcf\x42\x35\x5a\x54\x51\x12\xaf\x32\x31\x5f\x77\x50\xf8\xb3\xac\x1f\x09\xcf\x0d\x39\xfc\xbc\xf2\xaf\xd3\xfe\x65\xf5\x1d\xf5\x09\xf5\x2f\xd2\x5f\xa1\x73\xb2\xf8\x62\x04\x39\x59\x47\x06\x23\x43\x45\x78\xf1\x76\xbf\x26\x97\x6d\x51\xf2\xc5\xe5\x51\xac\x7b\x50\x07\x29\xe0\x86\x23\x25\x59\x46\xae\x36\x9a\xc3\x8b\xbf\xed\xc5\x41\x98\x6b\x6a\x20\xec\x32\x04\x29\x5c\x2f\x41\x43\x32\x02\x44\x06\x6d\xc1\xe5\x12\xf4\xd5\xd5\xa1\xa4\xaf\x4f\xec\xf3\xe4\x3e\xe0\xa3\x3f\xd3\x03\xe5\x7b\xfd\xe1\xd8\xfb\x6c\x42\xe1\xd9\x51\xdc\xa7\x77\x07\x68\x1c\x1e\x5c\x97\x2f\x93\x79\x72\xef\xdf\x51\xdb\xc0\xaa\xa1\xad\x43\x7f\xfd\xa2\x03\x4b\x0c\xae\xad\x6b\x6a\x78\x3a\x8a\xee\xb0\x24\x4e\xaa\xdf\x05\xbb\x65\x90\xc4\x7d\x07\xf2\x0d\x8a\x9f\x0c\xce\xfb\x53\xee\x9c\xc8\x82\xae\xd5\xf5\x91\xd0\x06\x9b\xb5\xa1\xed\x02\x4a\xad\x14\xda\x65\xb0\x0b\x56\xa4\x9e\xce\x4e\x7b\x6b\x2d\x95\xd2\xb6\x58\xc0\x75\x3f\xae\x64\x53\x68\x3b\x0e\xb7\x5a\x71\xb9\x80\x9b\xeb\xeb\x6f\x7b\x43\xd9\xdd\xd0\x73\xcb\x4a\xe6\x1f\x8b\x86\x5a\xab\x16\x50\x34\xf2\xc9\xd3\x7e\xe3\xbb\xd9\xa7\xa3\xe9\x6d\xa9\x19\x4f\xf2\x4c\x32\xa2\x1f\xb1\x3a\xfe\xdd\x7b\x91\xd3\xfe\x08\x2c\x40\xae\x1c\x99\x76\x00\x63\xaa\x17\x73\x3f\x83\x6b\x7e\x66\x68\x7a\xd1\x33\xcb\x8a\x98\xa9\x5a\xc0\xf7\x83\x61\x4a\x8f\x6c\x99\xba\x20\x7c\x63\xd9\x47\x31\xe9\x1b\x54\xcd\xc1\x0e\x83\x39\x23\x73\xe0\xbc\x39\xd0\x59\x3f\x9e\x49\xf6\xa9\x1d\x4d\xe2\xae\x12\xb2\x20\x89\xf7\xaf\x1a\xbf\xc7\x59\x90\x28\xbd\x01\xad\xd2\xee\xa5\x90\x25\xb1\xd2\x9b\x2c\x48\xba\x10\xbc\xb5\x6b\x92\x59\x87\x9a\x68\x5b\xb7\xc3\x53\xa7\xef\x99\x02\xba\x1e\x94\x8a\x7b\xb4\x4a\x40\x7c\xc2\xd1\xd7\x9c\xe8\xa0\xfc\xc3\x05\x9c\xfe\x17\x53\xf1\xd3\x0f\x22\xf6\x4a\x3c\xba\xff\xee\xa5\xc4\xfd\x3b\xec\xbf\x00\x00\x00\xff\xff\x7a\x16\x49\x6b\x98\x09\x00\x00")

func homeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeHtml,
		"home.html",
	)
}

func homeHtml() (*asset, error) {
	bytes, err := homeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.html", size: 2456, mode: os.FileMode(420), modTime: time.Unix(1491162575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"home.html": homeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"home.html": &bintree{homeHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
