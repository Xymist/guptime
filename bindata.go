// Code generated by go-bindata.
// sources:
// home.html
// assets/app.css
// assets/app.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _homeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x31\x4f\xc4\x30\x0c\x85\xf7\xfb\x15\xc6\x3f\x80\x2c\x88\x29\xe9\x02\x88\x05\x09\x24\x60\x60\xcc\x35\xbe\xd6\x47\xda\x46\xb5\x5b\x51\x7e\x3d\x4a\x93\x93\x40\x4c\xb1\xde\xb3\xde\xfb\x62\x7b\x75\xff\x7c\xf7\xf6\xf1\xf2\x00\xbd\x0e\xb1\x39\xd8\xfc\x40\xf4\x63\xe7\x90\x46\x6c\x0e\x00\xb6\x27\x1f\xf2\x00\x60\x95\x35\x52\xf3\xf8\x9e\x94\x07\x82\xa7\xa9\xb3\xa6\x48\xc5\x96\x76\xe6\xa4\xa0\x5b\x22\x87\x4a\x5f\x6a\xce\x7e\xf5\x45\x45\x90\xb9\x75\xe8\x45\x48\xc5\xf8\x94\xae\xcf\x82\x8d\x35\xc5\xad\x01\x91\xc7\x4f\x98\x29\x3a\x14\xdd\x22\x49\x4f\xa4\xf8\x3b\xaf\x15\x41\xe8\x67\x3a\xfd\x49\xda\x55\xb3\xc3\x9a\x0b\xad\x3d\x4e\x61\xab\xb1\x81\x57\xe0\xe0\x30\x4e\x5d\xae\x0c\xbc\x56\xe3\x34\xcd\xc3\xee\xe4\x01\x8b\x08\x60\x79\x4c\xcb\xe5\x1b\xb2\x1c\x07\x56\x84\xd5\xc7\x85\x1c\xbe\xd2\x18\x6a\xd7\xbf\xd5\x4c\x88\x7b\xdc\x20\x1d\x82\xf0\x37\x39\xbc\xbd\xc1\xba\x6d\x4d\x6e\x29\x94\x05\xce\x9a\x72\xf5\x9f\x00\x00\x00\xff\xff\x2d\xc2\x77\x35\x86\x01\x00\x00")

func homeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeHtml,
		"home.html",
	)
}

func homeHtml() (*asset, error) {
	bytes, err := homeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.html", size: 390, mode: os.FileMode(420), modTime: time.Unix(1491330592, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsAppCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x91\xc1\x6e\x83\x30\x0c\x86\xef\x3c\x85\xa5\x69\xd7\x09\x34\xed\x92\x3d\x4d\xb2\x84\xc4\x5a\x12\xa3\x60\xc6\x50\xd5\x77\xaf\x28\xa4\xa4\x14\x2e\x91\xfc\xdb\xf2\xff\xfd\x8e\xe3\xe0\xe1\x52\x01\x00\xd0\x9f\x49\xad\xa7\x51\x80\x43\xad\x4d\xfc\xae\xae\x95\x22\x3d\x9d\xb6\x67\xb5\x93\x5a\x63\xb4\x02\xea\xa5\x0e\x32\x59\x8c\x8f\x72\x44\xcd\x4e\x40\x53\xd7\xef\x8b\xe0\x0c\x5a\xc7\xa5\xa2\xe4\xcf\xaf\x4d\x34\x44\x2d\xc0\x26\x39\xcd\xb6\x6f\x9e\xec\x6a\x5b\xb6\x47\x87\x6c\x0e\x7d\x36\x8c\x8f\x2f\x13\x5e\xdf\x75\x8a\x7a\x64\xa4\x28\x40\xaa\x9e\xfc\x90\x97\x31\x75\xa2\x9c\xf3\xa6\xe5\x27\x21\x2d\xd0\x85\xa2\x88\x99\x82\x80\xcf\x2c\x6c\xe7\x91\x03\xd3\x3d\x44\x4b\x29\xac\x29\x36\xbe\x4c\x55\x2e\xdb\x87\x39\xc1\xcc\x9e\xcd\x8e\xb3\xfb\x3f\x39\xf6\xd1\x8f\xde\x02\x00\x00\xff\xff\x84\xf6\xae\x4d\xf1\x01\x00\x00")

func assetsAppCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsAppCss,
		"assets/app.css",
	)
}

func assetsAppCss() (*asset, error) {
	bytes, err := assetsAppCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/app.css", size: 497, mode: os.FileMode(420), modTime: time.Unix(1491330144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\x4f\x8f\xda\x3c\x10\xc6\xef\x7c\x8a\x79\x7d\x21\x08\xbd\xa6\xbd\x96\x0d\x87\xae\x2a\x6d\xa5\xdd\xd3\x22\x55\xd5\x76\x0f\x26\x19\x82\x55\x67\x26\xca\x38\xd0\xaa\xe2\xbb\x57\x0e\xe4\x0f\x81\xdd\x2d\x7b\x81\xd8\x19\x3f\xcf\xcf\x8f\xc7\xd9\x59\x4a\x79\xa7\x99\x1c\x9b\x14\x62\x58\x57\x94\x78\xcb\x04\xd1\x04\xfe\x8c\x00\x00\xb6\xa6\x84\x84\x89\xe6\xed\x28\x97\x0c\x62\x48\x39\xa9\x72\x24\xaf\x33\xf4\x5f\x1c\x86\xc7\xcf\xbf\xbf\xa6\x91\xca\x25\x53\x93\xae\xda\xf1\xab\xd5\x8e\xdb\xea\xd6\xdb\x14\x05\x52\x7a\xcf\x59\x64\x3d\xe6\x0d\x48\x23\x98\xf2\x63\x52\xb2\x73\x10\x07\x6d\x2d\xf5\x60\xc9\x05\x2c\x7a\xe3\x3b\xb4\xd9\xc6\xc3\xff\xf5\x54\xe2\x2c\x92\x6f\xa7\x3e\xce\x5b\xbd\xf0\xf6\xe0\x76\xbb\xb1\x2e\x3d\xf8\x75\xaf\xed\x1a\xa2\xc6\xae\x8f\xd1\x2c\xed\xbc\xe3\x7f\xf1\xee\x84\xf7\xa3\xee\xf7\xc5\x68\xd6\x5c\xe6\x6a\xa2\x99\xa4\x5a\xe5\xd6\x5f\x3c\x9d\x86\xf2\xbf\x70\x44\x43\xc4\x12\x7d\x55\x12\xac\x8d\x13\x1c\x7a\xb7\x0b\x73\xc9\xf4\xd6\xb8\x0a\xaf\x5d\x1d\x1c\xb5\x20\xa5\x51\x27\xd1\xd5\xb5\x73\x10\x83\x52\xdd\xfc\xb9\xea\xfe\xf0\x17\x60\x0e\xdd\xf8\xa4\xbe\xe1\xea\x91\x93\x9f\xe8\xd5\x73\x9f\x2a\x38\x42\x0c\x84\x3b\x68\x2b\x22\xb5\x93\x4f\xb3\x99\x82\x69\x17\xa4\xe3\xc4\x84\x98\xf4\x86\xc5\xc3\x14\xd4\x4c\xbc\xf1\x95\xa8\x1e\x5f\x4d\xcf\xc4\x05\xd2\x49\xb0\xb8\xf5\xa7\x41\x84\x96\x0b\x6d\xd1\x6f\xe2\xa4\x44\xe3\xf1\x78\x58\x91\x4a\xed\xb6\x2f\x0d\x75\xbd\xb6\x44\x58\xde\x2d\x1f\xee\x43\x02\x37\xab\xc5\x2d\x13\xe1\xc1\x25\xb8\x62\xaa\x6f\x66\xab\x85\xea\xaf\x1b\x34\x7e\x2f\xf5\x33\xf0\xc4\xb1\xe0\xeb\xe4\xef\x63\x7f\x9b\xbe\xb6\xbe\x40\x7f\x15\x7f\x8e\x22\x26\x7b\x73\x07\x09\x93\xb0\x43\xed\x38\x8b\xc6\x0f\xc7\x35\x89\xa9\xb2\x8d\x1f\x4f\xce\xf6\x7a\x14\x15\x88\x01\xb7\x5e\xa7\xc6\x1b\x2d\x85\xb3\x3e\x1a\xff\xa0\xf1\x60\x9b\x6b\x2e\x21\xaa\x13\x82\x18\x3e\xcc\xc1\xc2\x4d\x2b\xa0\x1d\x52\xe6\x37\x73\xb0\xd3\xe9\x10\xe9\xfd\xc1\x9e\x86\xbb\xc4\x5f\xe1\x4e\x37\x96\x4f\xf6\xf9\xbc\xfa\xc5\x40\xe1\xe4\x2a\x1e\xe3\xdd\x03\x3a\xc1\xc1\xe7\xf2\x3a\xcc\x8b\x67\xff\x9d\xab\x12\x56\x25\xef\x04\xc3\xe7\x17\x05\x88\x3d\x48\x55\x14\x5c\xfa\xee\x2a\xca\xb0\x25\x2e\xd2\xef\x47\xfb\xf9\xe8\x6f\x00\x00\x00\xff\xff\x54\xa0\x99\xc1\x77\x06\x00\x00")

func assetsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsAppJs,
		"assets/app.js",
	)
}

func assetsAppJs() (*asset, error) {
	bytes, err := assetsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/app.js", size: 1655, mode: os.FileMode(420), modTime: time.Unix(1491326438, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"home.html": homeHtml,
	"assets/app.css": assetsAppCss,
	"assets/app.js": assetsAppJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"app.css": &bintree{assetsAppCss, map[string]*bintree{}},
		"app.js": &bintree{assetsAppJs, map[string]*bintree{}},
	}},
	"home.html": &bintree{homeHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

